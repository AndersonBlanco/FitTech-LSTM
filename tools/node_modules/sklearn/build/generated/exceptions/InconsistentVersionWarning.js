// src/generated/exceptions/InconsistentVersionWarning.ts
import crypto from "node:crypto";
var InconsistentVersionWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `InconsistentVersionWarning${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This InconsistentVersionWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "InconsistentVersionWarning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import InconsistentVersionWarning
try: bridgeInconsistentVersionWarning
except NameError: bridgeInconsistentVersionWarning = {}
`;
    await this._py.ex`ctor_InconsistentVersionWarning = {'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'current_sklearn_version': ${this.opts["current_sklearn_version"] ?? void 0}, 'original_sklearn_version': ${this.opts["original_sklearn_version"] ?? void 0}}

ctor_InconsistentVersionWarning = {k: v for k, v in ctor_InconsistentVersionWarning.items() if v is not None}`;
    await this._py.ex`bridgeInconsistentVersionWarning[${this.id}] = InconsistentVersionWarning(**ctor_InconsistentVersionWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeInconsistentVersionWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) â€“ set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This InconsistentVersionWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "InconsistentVersionWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_InconsistentVersionWarning_with_traceback = {}

pms_InconsistentVersionWarning_with_traceback = {k: v for k, v in pms_InconsistentVersionWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_InconsistentVersionWarning_with_traceback = bridgeInconsistentVersionWarning[${this.id}].with_traceback(**pms_InconsistentVersionWarning_with_traceback)`;
    return this._py`res_InconsistentVersionWarning_with_traceback.tolist() if hasattr(res_InconsistentVersionWarning_with_traceback, 'tolist') else res_InconsistentVersionWarning_with_traceback`;
  }
  get args() {
    if (this._isDisposed) {
      throw new Error(
        "This InconsistentVersionWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "InconsistentVersionWarning must call init() before accessing args"
      );
    }
    return (async () => {
      await this._py.ex`attr_InconsistentVersionWarning_args = bridgeInconsistentVersionWarning[${this.id}].args`;
      return this._py`attr_InconsistentVersionWarning_args.tolist() if hasattr(attr_InconsistentVersionWarning_args, 'tolist') else attr_InconsistentVersionWarning_args`;
    })();
  }
};
export {
  InconsistentVersionWarning
};
//# sourceMappingURL=InconsistentVersionWarning.js.map
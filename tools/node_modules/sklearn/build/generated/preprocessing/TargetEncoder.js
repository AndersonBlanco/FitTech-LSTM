// src/generated/preprocessing/TargetEncoder.ts
import crypto from "node:crypto";
var TargetEncoder = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TargetEncoder${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TargetEncoder.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import TargetEncoder
try: bridgeTargetEncoder
except NameError: bridgeTargetEncoder = {}
`;
    await this._py.ex`ctor_TargetEncoder = {'categories': np.array(${this.opts["categories"] ?? void 0}) if ${this.opts["categories"] !== void 0} else None, 'target_type': ${this.opts["target_type"] ?? void 0}, 'smooth': ${this.opts["smooth"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_TargetEncoder = {k: v for k, v in ctor_TargetEncoder.items() if v is not None}`;
    await this._py.ex`bridgeTargetEncoder[${this.id}] = TargetEncoder(**ctor_TargetEncoder)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTargetEncoder[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the [`TargetEncoder`](#sklearn.preprocessing.TargetEncoder "sklearn.preprocessing.TargetEncoder") to X and y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TargetEncoder must call init() before fit()");
    }
    await this._py.ex`pms_TargetEncoder_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_TargetEncoder_fit = {k: v for k, v in pms_TargetEncoder_fit.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_fit = bridgeTargetEncoder[${this.id}].fit(**pms_TargetEncoder_fit)`;
    return this._py`res_TargetEncoder_fit.tolist() if hasattr(res_TargetEncoder_fit, 'tolist') else res_TargetEncoder_fit`;
  }
  /**
    Fit [`TargetEncoder`](#sklearn.preprocessing.TargetEncoder "sklearn.preprocessing.TargetEncoder") and transform X with the target encoding.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TargetEncoder must call init() before fit_transform()");
    }
    await this._py.ex`pms_TargetEncoder_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_TargetEncoder_fit_transform = {k: v for k, v in pms_TargetEncoder_fit_transform.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_fit_transform = bridgeTargetEncoder[${this.id}].fit_transform(**pms_TargetEncoder_fit_transform)`;
    return this._py`res_TargetEncoder_fit_transform.tolist() if hasattr(res_TargetEncoder_fit_transform, 'tolist') else res_TargetEncoder_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_TargetEncoder_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_TargetEncoder_get_feature_names_out = {k: v for k, v in pms_TargetEncoder_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_get_feature_names_out = bridgeTargetEncoder[${this.id}].get_feature_names_out(**pms_TargetEncoder_get_feature_names_out)`;
    return this._py`res_TargetEncoder_get_feature_names_out.tolist() if hasattr(res_TargetEncoder_get_feature_names_out, 'tolist') else res_TargetEncoder_get_feature_names_out`;
  }
  /**
      Get metadata routing of this object.
  
      Please check [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
     */
  async get_metadata_routing(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before get_metadata_routing()"
      );
    }
    await this._py.ex`pms_TargetEncoder_get_metadata_routing = {'routing': ${opts["routing"] ?? void 0}}

pms_TargetEncoder_get_metadata_routing = {k: v for k, v in pms_TargetEncoder_get_metadata_routing.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_get_metadata_routing = bridgeTargetEncoder[${this.id}].get_metadata_routing(**pms_TargetEncoder_get_metadata_routing)`;
    return this._py`res_TargetEncoder_get_metadata_routing.tolist() if hasattr(res_TargetEncoder_get_metadata_routing, 'tolist') else res_TargetEncoder_get_metadata_routing`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TargetEncoder must call init() before set_output()");
    }
    await this._py.ex`pms_TargetEncoder_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_TargetEncoder_set_output = {k: v for k, v in pms_TargetEncoder_set_output.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_set_output = bridgeTargetEncoder[${this.id}].set_output(**pms_TargetEncoder_set_output)`;
    return this._py`res_TargetEncoder_set_output.tolist() if hasattr(res_TargetEncoder_set_output, 'tolist') else res_TargetEncoder_set_output`;
  }
  /**
    Transform X with the target encoding.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TargetEncoder must call init() before transform()");
    }
    await this._py.ex`pms_TargetEncoder_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TargetEncoder_transform = {k: v for k, v in pms_TargetEncoder_transform.items() if v is not None}`;
    await this._py.ex`res_TargetEncoder_transform = bridgeTargetEncoder[${this.id}].transform(**pms_TargetEncoder_transform)`;
    return this._py`res_TargetEncoder_transform.tolist() if hasattr(res_TargetEncoder_transform, 'tolist') else res_TargetEncoder_transform`;
  }
  /**
    Encodings learnt on all of `X`. For feature `i`, `encodings\_\[i\]` are the encodings matching the categories listed in `categories\_\[i\]`.
   */
  get encodings_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing encodings_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_encodings_ = bridgeTargetEncoder[${this.id}].encodings_`;
      return this._py`attr_TargetEncoder_encodings_.tolist() if hasattr(attr_TargetEncoder_encodings_, 'tolist') else attr_TargetEncoder_encodings_`;
    })();
  }
  /**
    The categories of each feature determined during fitting or specified in `categories` (in order of the features in `X` and corresponding with the output of [`transform`](#sklearn.preprocessing.TargetEncoder.transform "sklearn.preprocessing.TargetEncoder.transform")).
   */
  get categories_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing categories_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_categories_ = bridgeTargetEncoder[${this.id}].categories_`;
      return this._py`attr_TargetEncoder_categories_.tolist() if hasattr(attr_TargetEncoder_categories_, 'tolist') else attr_TargetEncoder_categories_`;
    })();
  }
  /**
    Type of target.
   */
  get target_type_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing target_type_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_target_type_ = bridgeTargetEncoder[${this.id}].target_type_`;
      return this._py`attr_TargetEncoder_target_type_.tolist() if hasattr(attr_TargetEncoder_target_type_, 'tolist') else attr_TargetEncoder_target_type_`;
    })();
  }
  /**
    The overall mean of the target. This value is only used in [`transform`](#sklearn.preprocessing.TargetEncoder.transform "sklearn.preprocessing.TargetEncoder.transform") to encode categories.
   */
  get target_mean_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing target_mean_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_target_mean_ = bridgeTargetEncoder[${this.id}].target_mean_`;
      return this._py`attr_TargetEncoder_target_mean_.tolist() if hasattr(attr_TargetEncoder_target_mean_, 'tolist') else attr_TargetEncoder_target_mean_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_n_features_in_ = bridgeTargetEncoder[${this.id}].n_features_in_`;
      return this._py`attr_TargetEncoder_n_features_in_.tolist() if hasattr(attr_TargetEncoder_n_features_in_, 'tolist') else attr_TargetEncoder_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This TargetEncoder instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TargetEncoder must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TargetEncoder_feature_names_in_ = bridgeTargetEncoder[${this.id}].feature_names_in_`;
      return this._py`attr_TargetEncoder_feature_names_in_.tolist() if hasattr(attr_TargetEncoder_feature_names_in_, 'tolist') else attr_TargetEncoder_feature_names_in_`;
    })();
  }
};
export {
  TargetEncoder
};
//# sourceMappingURL=TargetEncoder.js.map
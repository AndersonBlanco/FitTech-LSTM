// src/generated/model_selection/ValidationCurveDisplay.ts
import crypto from "node:crypto";
var ValidationCurveDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ValidationCurveDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "ValidationCurveDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ValidationCurveDisplay
try: bridgeValidationCurveDisplay
except NameError: bridgeValidationCurveDisplay = {}
`;
    await this._py.ex`ctor_ValidationCurveDisplay = {'param_name': ${this.opts["param_name"] ?? void 0}, 'param_range': np.array(${this.opts["param_range"] ?? void 0}) if ${this.opts["param_range"] !== void 0} else None, 'train_scores': np.array(${this.opts["train_scores"] ?? void 0}) if ${this.opts["train_scores"] !== void 0} else None, 'test_scores': np.array(${this.opts["test_scores"] ?? void 0}) if ${this.opts["test_scores"] !== void 0} else None, 'score_name': ${this.opts["score_name"] ?? void 0}}

ctor_ValidationCurveDisplay = {k: v for k, v in ctor_ValidationCurveDisplay.items() if v is not None}`;
    await this._py.ex`bridgeValidationCurveDisplay[${this.id}] = ValidationCurveDisplay(**ctor_ValidationCurveDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeValidationCurveDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Create a validation curve display from an estimator.
  
      Read more in the [User Guide](../../visualizations.html#visualizations) for general information about the visualization API and [detailed documentation](../learning_curve.html#validation-curve) regarding the validation curve visualization.
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_ValidationCurveDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'param_name': ${opts["param_name"] ?? void 0}, 'param_range': np.array(${opts["param_range"] ?? void 0}) if ${opts["param_range"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'cv': ${opts["cv"] ?? void 0}, 'scoring': ${opts["scoring"] ?? void 0}, 'n_jobs': ${opts["n_jobs"] ?? void 0}, 'pre_dispatch': ${opts["pre_dispatch"] ?? void 0}, 'verbose': ${opts["verbose"] ?? void 0}, 'error_score': ${opts["error_score"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_ValidationCurveDisplay_from_estimator = {k: v for k, v in pms_ValidationCurveDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_ValidationCurveDisplay_from_estimator = bridgeValidationCurveDisplay[${this.id}].from_estimator(**pms_ValidationCurveDisplay_from_estimator)`;
    return this._py`res_ValidationCurveDisplay_from_estimator.tolist() if hasattr(res_ValidationCurveDisplay_from_estimator, 'tolist') else res_ValidationCurveDisplay_from_estimator`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ValidationCurveDisplay must call init() before plot()");
    }
    await this._py.ex`pms_ValidationCurveDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_ValidationCurveDisplay_plot = {k: v for k, v in pms_ValidationCurveDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_ValidationCurveDisplay_plot = bridgeValidationCurveDisplay[${this.id}].plot(**pms_ValidationCurveDisplay_plot)`;
    return this._py`res_ValidationCurveDisplay_plot.tolist() if hasattr(res_ValidationCurveDisplay_plot, 'tolist') else res_ValidationCurveDisplay_plot`;
  }
  /**
    Axes with the validation curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ValidationCurveDisplay_ax_ = bridgeValidationCurveDisplay[${this.id}].ax_`;
      return this._py`attr_ValidationCurveDisplay_ax_.tolist() if hasattr(attr_ValidationCurveDisplay_ax_, 'tolist') else attr_ValidationCurveDisplay_ax_`;
    })();
  }
  /**
    Figure containing the validation curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ValidationCurveDisplay_figure_ = bridgeValidationCurveDisplay[${this.id}].figure_`;
      return this._py`attr_ValidationCurveDisplay_figure_.tolist() if hasattr(attr_ValidationCurveDisplay_figure_, 'tolist') else attr_ValidationCurveDisplay_figure_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"errorbar"`, this is a list of `matplotlib.container.ErrorbarContainer` objects. If another style is used, `errorbar\_` is `undefined`.
   */
  get errorbar_() {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before accessing errorbar_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ValidationCurveDisplay_errorbar_ = bridgeValidationCurveDisplay[${this.id}].errorbar_`;
      return this._py`attr_ValidationCurveDisplay_errorbar_.tolist() if hasattr(attr_ValidationCurveDisplay_errorbar_, 'tolist') else attr_ValidationCurveDisplay_errorbar_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.lines.Line2D` objects corresponding to the mean train and test scores. If another style is used, `line\_` is `undefined`.
   */
  get lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before accessing lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ValidationCurveDisplay_lines_ = bridgeValidationCurveDisplay[${this.id}].lines_`;
      return this._py`attr_ValidationCurveDisplay_lines_.tolist() if hasattr(attr_ValidationCurveDisplay_lines_, 'tolist') else attr_ValidationCurveDisplay_lines_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.collections.PolyCollection` objects. If another style is used, `fill\_between\_` is `undefined`.
   */
  get fill_between_() {
    if (this._isDisposed) {
      throw new Error(
        "This ValidationCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ValidationCurveDisplay must call init() before accessing fill_between_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ValidationCurveDisplay_fill_between_ = bridgeValidationCurveDisplay[${this.id}].fill_between_`;
      return this._py`attr_ValidationCurveDisplay_fill_between_.tolist() if hasattr(attr_ValidationCurveDisplay_fill_between_, 'tolist') else attr_ValidationCurveDisplay_fill_between_`;
    })();
  }
};
export {
  ValidationCurveDisplay
};
//# sourceMappingURL=ValidationCurveDisplay.js.map
{"version":3,"sources":["../../../src/generated/metrics/DistanceMetric.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Uniform interface for fast distance metric functions.\n\n  The `DistanceMetric` class provides a convenient way to compute pairwise distances between samples. It supports various distance metrics, such as Euclidean distance, Manhattan distance, and more.\n\n  The `pairwise` method can be used to compute pairwise distances between samples in the input arrays. It returns a distance matrix representing the distances between all pairs of samples.\n\n  The [`get\\_metric`](#sklearn.metrics.DistanceMetric.get_metric \"sklearn.metrics.DistanceMetric.get_metric\") method allows you to retrieve a specific metric using its string identifier.\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html)\n */\nexport class DistanceMetric {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The string identifier or class name of the desired distance metric. See the documentation of the `DistanceMetric` class for a list of available metrics.\n     */\n    metric?: string\n\n    /**\n      The data type of the input on which the metric will be applied. This affects the precision of the computed distances. By default, it is set to `np.float64`.\n     */\n    dtype?: any\n\n    /**\n      Additional keyword arguments that will be passed to the requested metric. These arguments can be used to customize the behavior of the specific metric.\n     */\n    kwargs?: any\n  }) {\n    this.id = `DistanceMetric${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DistanceMetric.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import DistanceMetric\ntry: bridgeDistanceMetric\nexcept NameError: bridgeDistanceMetric = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DistanceMetric = {'metric': ${\n      this.opts['metric'] ?? undefined\n    }, 'dtype': ${this.opts['dtype'] ?? undefined}, 'kwargs': ${\n      this.opts['kwargs'] ?? undefined\n    }}\n\nctor_DistanceMetric = {k: v for k, v in ctor_DistanceMetric.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDistanceMetric[${this.id}] = DistanceMetric(**ctor_DistanceMetric)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDistanceMetric[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Get the given distance metric from the string identifier.\n\n    See the docstring of DistanceMetric for a list of available metrics.\n   */\n  async get_metric(opts: {\n    /**\n      The string identifier or class name of the desired distance metric. See the documentation of the `DistanceMetric` class for a list of available metrics.\n     */\n    metric?: string\n\n    /**\n      The data type of the input on which the metric will be applied. This affects the precision of the computed distances. By default, it is set to `np.float64`.\n     */\n    dtype?: any\n\n    /**\n      Additional keyword arguments that will be passed to the requested metric. These arguments can be used to customize the behavior of the specific metric.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before get_metric()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_get_metric = {'metric': ${\n      opts['metric'] ?? undefined\n    }, 'dtype': ${opts['dtype'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_DistanceMetric_get_metric = {k: v for k, v in pms_DistanceMetric_get_metric.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_get_metric = bridgeDistanceMetric[${this.id}].get_metric(**pms_DistanceMetric_get_metric)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_get_metric.tolist() if hasattr(res_DistanceMetric_get_metric, 'tolist') else res_DistanceMetric_get_metric`\n  }\n\n  /**\n    An instance of the requested distance metric class.\n   */\n  get metric_obj(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DistanceMetric must call init() before accessing metric_obj'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DistanceMetric_metric_obj = bridgeDistanceMetric[${this.id}].metric_obj`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DistanceMetric_metric_obj.tolist() if hasattr(attr_DistanceMetric_metric_obj, 'tolist') else attr_DistanceMetric_metric_obj`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAiBZ,IAAM,iBAAN,MAAqB;AAAA,EAQ1B,YAAY,MAeT;AAlBH,0BAA0B;AAC1B,uBAAuB;AAkBrB,SAAK,KAAK,iBAAiB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC3D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,sCACb,KAAK,KAAK,QAAQ,KAAK,oBACX,KAAK,KAAK,OAAO,KAAK,qBAClC,KAAK,KAAK,QAAQ,KAAK;AAAA;AAAA;AAKzB,UAAM,KAAK,IACR,0BAA0B,KAAK;AAElC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK;AAElD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAeA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAGA,UAAM,KAAK,IAAI,gDACb,KAAK,QAAQ,KAAK,oBACN,KAAK,OAAO,KAAK,qBAC7B,KAAK,QAAQ,KAAK;AAAA;AAAA;AAMpB,UAAM,KAAK,IACR,0DAA0D,KAAK;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAA2B;AAC7B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,2DAA2D,KAAK;AAGnE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}